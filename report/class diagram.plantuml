@startuml quantityer_class_diagram
class Main{
    +run()
}
abstract class Parser {
    {abstract} +get_middle_codes(source:Union[str, TextIO]) -> Iterable[MiddleCode]
    {abstract} #parse(middle_code: MiddleCode) -> MiddleCode
}
abstract class Engine {
    +get_total_amount(middle_code: MiddleCode) -> Tuple
}
abstract Cache {
    {abstract} +__setitem__(key:str, value: int)
    {abstract} +__getitem__(key:str) -> int
}
abstract Decomposer {
    {abstract} +get_subqueries() -> Iterable[MiddleCode]
    +set_middle_code(middle_code: MiddleCode)
}
abstract MiddleCode {
    +__init__(namespace: str, name: str)
    +{method} full_name -> str
}
abstract class QueryIssuer {
    {abstract} +def issue(name: str, query: str) -> Tuple[bool, int]
}
abstract class Translator {
    {abstract} +get_particular_query(middle_code: MiddleCode) -> str
}
abstract class Input {
    {abstract} +get_middle_codes(self) -> Iterable[MiddleCode]
}
abstract class Output {
    {abstract} +output(results: Tuple)
}

Main "1" *-l- "1" Engine
Main "1" *-- "1" Input
Main "1" *-u- "1" Output
Engine "1" *-u- "1" Cache
Engine "1" *-u- "1" QueryIssuer
Engine "1" *-- "1" Decomposer
Engine "1" *-- "1" Translator
Engine "1" ..> "*" MiddleCode
Decomposer "1" ..> "*" MiddleCode
Parser "1" ..> "*" MiddleCode
Translator "1" .d.> "*" MiddleCode
Input "1" *-- "1" Parser
@enduml
